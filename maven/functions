#!/bin/bash

# Index
# 1. git_create_branch - Create git branch based on next version of artifacts
# 2. set_versions - mvn versions:set for target projects with parsed-versions plugin
# 4. commit_changes - commit changes into remote preparation_branch
# 5. deploy_artifacts - deploy artifacts into Nexus

git_create_branch(){
  # Check if release type is valid
  if [ "$release_type" != "major" ] &&
     [ "$release_type" != "minor" ] 
  then 
      echo "Only major, minor release types are allowed!"
      exit 0
  fi
  echo "$repo_path"
  cd "$repo_path" || exit 10

  # Set actual version into variable
  case "$release_type" in
      "major") version_argument='${parsedVersion.majorVersion}' 
               version=$(mvn build-helper:parse-version -N -q -Dexec.executable='echo' org.codehaus.mojo:exec-maven-plugin:1.3.1:exec \
               -Dexec.args="$version_argument")
               # Set original branch name based on release type
               original_branch_name="develop" 
               # Set branch name based on release type
               release_name="$version"
               branch_name=$(echo "release/$release_name") ;;
      "minor") version_argument='${parsedVersion.majorVersion}.${parsedVersion.nextMinorVersion}' 
               version=$(mvn build-helper:parse-version -N -q -Dexec.executable='echo' org.codehaus.mojo:exec-maven-plugin:1.3.1:exec \
               -Dexec.args="$version_argument")
               # Set branch name based on release type
               release_name="$version"
               major_release_name=$(echo $version | cut -f1 -d '.')
               original_branch_name="release/$major_release_name"
               # Set branch name based on release type
               branch_name=$(echo "release/$release_name") ;;
  esac

  if [ git rev-parse --verify "$branch_name" >/dev/null 2>&1 ] || [ git rev-parse --verify "origin/$branch_name" >/dev/null 2>&1 ]; then
      echo "Branch already exists: $branch_name"
      exit 0
  fi

  # Create new release branch
  echo "Creating branch $branch_name"
  git checkout "$original_branch_name"
  git checkout -b "$branch_name" || exit 11
  git push origin $branch_name:$branch_name
  echo "New branch $branch_name created"

  # Creating preparation branch
  preparation_branch_name=$(echo $branch_name-prepare)
  echo "Creating branch $preparation_branch_name"
  git checkout -b "$preparation_branch_name" || exit 11
  git push origin $preparation_branch_name:$preparation_branch_name
  echo "New branch $preparation_branch_name created"
}

## Set maven versions
set_versions(){
    # Check if release type is valid
    if [ "$release_type" != "major" ] &&
       [ "$release_type" != "minor" ] 
    then 
        echo "Only major and minor release types are allowed!"
        exit 0
    fi

    # Position in installer repo directory
    cd $repo_path

    # Set variable for version replacement
    case "$release_type" in
        "major") # Set actual version into variable
                 current_version=$(mvn build-helper:parse-version -N -q -Dexec.executable='echo' org.codehaus.mojo:exec-maven-plugin:1.3.1:exec \
                 -Dexec.args='${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}${parsedVersion.qualifier?}')   
                 # Set next version build-helper argument into variable
                 version_argument='${parsedVersion.nextMajorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}${parsedVersion.qualifier?}' 

                 # Checkout preparation branch
                 git checkout "$original_branch_name"
                 git branch --set-upstream-to=origin/"$original_branch_name" "$original_branch_name"
                 git checkout "$preparation_branch_name"
                 
                 # Set next version into variable 
                 next_version=$(mvn build-helper:parse-version -N -q -Dexec.executable='echo' org.codehaus.mojo:exec-maven-plugin:1.3.1:exec \
                             -Dexec.args="$version_argument")

                 # Print Next and Old version
                 echo "Next version is $next_version"
                 echo "Next version is $current_version"

                 # Set versions on POMs based on release type
                 mvn build-helper:parse-version versions:set \
                     -DprocessAllModules -DgenerateBackupPoms=false -DprocessPlugins=false -DartifactId='*' \
                     -DnewVersion="$version_argument" \
                     -DoldVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion}\${parsedVersion.qualifier?} ;;

        "minor") # Checkout preparation branch
                 git checkout "$original_branch_name"
                 git branch --set-upstream-to=origin/"$original_branch_name" "$original_branch_name"
                 git checkout "$preparation_branch_name"

                 # Set old and new versions into variables
                 next_version="$(echo $release_name.0-SNAPSHOT | sed "s,release/,,g")"
                 current_version="$major_version-MINOR-SNAPSHOT"
                 
                 # Print Next and Old versions
                 echo "Next version is $next_version"
                 echo "Old version is $current_version"

                 # Set versions on POMs based on release type
                 mvn build-helper:parse-version versions:set \
                     -DprocessAllModules -DgenerateBackupPoms=false -DprocessPlugins=false -DartifactId='*' \
                     -DnewVersion="$next_version" \
                     -DoldVersion="$current_version" ;;
    esac    
}

commit_changes(){
    # COMMIT
    echo "Committing the changes into $preparation_branch_name"
    git add . || exit 12
    git commit -m "Change all versions to $next_version, preparation for $release_name" || exit 14
    echo "Pushing the result to origin"
    git push -u origin $preparation_branch_name || exit 15
}

deploy_artifacts(){
    echo "Deploying artifacts!"
    mvn deploy -DskipTests -Dcertpath="" -Dcertpwd="" -fn
}